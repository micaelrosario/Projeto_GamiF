// ui.js - M√≥dulo de Gerenciamento da Interface do Usu√°rio (UI)

// Importa fun√ß√µes e dados de outros m√≥dulos JavaScript
import { getProgress } from './state.js'; // Importa a fun√ß√£o getProgress do m√≥dulo 'state.js' para obter o progresso do usu√°rio.
import { modules, quizData } from './data.js'; // Importa a lista de m√≥dulos e os dados dos quizzes do m√≥dulo 'data.js'.

let lives = 4; // O n√∫mero de vidas iniciais.

// DOMElements: Objeto que armazena refer√™ncias a todos os elementos HTML importantes que ser√£o manipulados pelo JavaScript.
// Isso evita a necessidade de procurar os elementos no DOM repetidamente, melhorando a performance e organiza√ß√£o.
export const DOMElements = {
    pageTitle: document.getElementById('page-title'), // T√≠tulo principal da p√°gina
    pageSubtitle: document.getElementById('page-subtitle'), // Subt√≠tulo da p√°gina
    outDoor: document.getElementById('outdoor-gamif'),
    rodape: document.getElementById('rodape'),
    moduleHeaderImage: document.getElementById('module-header-image'), // Imagem no cabe√ßalho do m√≥dulo
    modulesContainer: document.getElementById('modules-container'), // Container onde os cards dos m√≥dulos s√£o exibidos
    quizContainer: document.getElementById('quiz-container'), // Container onde o quiz (perguntas e op√ß√µes) √© exibido
    questionText: document.getElementById('question-text'), // Elemento onde o texto da pergunta √© exibido
    optionsContainer: document.getElementById('options-container'), // Container para os bot√µes das op√ß√µes de resposta
    feedbackArea: document.getElementById('feedback-area'), // √Årea para exibir feedback ap√≥s uma resposta
    feedbackText: document.getElementById('feedback-text'), // Texto do feedback (correto/incorreto, explica√ß√£o)
    nextButton: document.getElementById('next-button'), // Bot√£o para a pr√≥xima pergunta ou resultados
    score: document.getElementById('score'), // Elemento onde a pontua√ß√£o atual √© exibida
    scoreArea: document.getElementById('score-area'), // Elemento onde a pontua√ß√£o atual √© exibida
    questionArea: document.getElementById('question-area'), // √Årea que engloba a pergunta e op√ß√µes
    backToModulesButton: document.getElementById('back-to-modules-button'), // Bot√£o para voltar para a tela de m√≥dulos
    progressContainer: document.getElementById('progress-container'), // Container da barra de progresso do quiz
    progressBar: document.getElementById('progress-bar'), // A barra de progresso visual
    progressText: document.getElementById('progress-text'), // Texto que mostra o progresso (ex: "1/5")
    livesContainer: document.getElementById('lives-container'),
    topBar: document.getElementById('top-bar'),
    livesCount: document.getElementById('lives-count'),
    messageBox: document.getElementById('message-box')
};


// =============================================================
// ---------- NOVIDADE: FUN√á√ïES PARA O SISTEMA DE VIDAS ----------
// =============================================================
/**
 * Reseta o n√∫mero de vidas para o valor inicial e atualiza a exibi√ß√£o.
 */
export function resetLives() {
    lives = 4;
    updateLivesDisplay();
}

/**
 * Atualiza o texto que exibe o n√∫mero de vidas na interface.
 */
export function updateLivesDisplay() {
    if (DOMElements.livesCount) {
        DOMElements.livesCount.textContent = lives;
    }
}

/**
 * Exibe a caixa de mensagem customizada, como "Game Over".
 * @param {string} message - A mensagem a ser exibida.
 */
function showMessageBox(message) {
    if (DOMElements.messageBox) {
        DOMElements.messageBox.textContent = message;
        DOMElements.messageBox.classList.remove('hidden');
        DOMElements.messageBox.classList.add('message-box-visible');
    }
}



/**
 * Atualiza o cabe√ßalho principal da p√°gina com novo t√≠tulo, subt√≠tulo e, opcionalmente, uma imagem.
 * @param {string} title - O novo t√≠tulo da p√°gina.
 * @param {string} subtitle - O novo subt√≠tulo da p√°gina.
 * @param {string | null} imageSrc - Opcional. O caminho da imagem para o cabe√ßalho do m√≥dulo. Se for null, a imagem √© escondida.
 */
export function updateHeader(title, subtitle, imageSrc = null) {
    DOMElements.pageTitle.textContent = title; // Atualiza o texto do t√≠tulo da p√°gina
    DOMElements.pageSubtitle.textContent = subtitle; // Atualiza o texto do subt√≠tulo da p√°gina
    DOMElements.moduleHeaderImage.classList.remove('hidden'); // Mostra a imagem
    /*if (imageSrc) {
        DOMElements.moduleHeaderImage.src = imageSrc; // Define o caminho da imagem
        DOMElements.moduleHeaderImage.alt = title; // Define o texto alternativo da imagem para acessibilidade
        DOMElements.moduleHeaderImage.classList.remove('hidden'); // Mostra a imagem
    } else {
        DOMElements.moduleHeaderImage.classList.add('hidden'); // Esconde a imagem se n√£o houver um caminho
    }*/
}

/**
 * Cria e retorna o elemento HTML (card) para um m√≥dulo de quiz individual.
 * @param {Object} module - O objeto contendo os dados do m√≥dulo (id, title, description, image, locked).
 * @param {Function} onStartQuiz - Fun√ß√£o de callback a ser executada quando o m√≥dulo √© clicado para iniciar o quiz.
 * @returns {HTMLElement} O elemento DIV HTML representando o card do m√≥dulo.
 */
function createModuleHTML(module, onStartQuiz) {
    // Cria um novo elemento DIV que ser√° o card do m√≥dulo
    const moduleElement = document.createElement('div');
    moduleElement.classList.add('module-item'); // Adiciona a classe CSS 'module-item' para estiliza√ß√£o

    let progressHTML = ''; // String para armazenar o HTML do indicador de progresso (estrelas/trof√©u/cadeado)
    const progressData = getProgress(); // Obt√©m todos os dados de progresso do usu√°rio (salvos localmente)
    const moduleProgress = progressData[module.id]; // Pega o progresso espec√≠fico para este m√≥dulo
    const questionsForModule = quizData[module.id]?.questions || []; // Obt√©m as perguntas do m√≥dulo do quizData
    const totalQuestions = questionsForModule.length; // Calcula o n√∫mero total de perguntas para este m√≥dulo

    // L√≥gica para determinar o estado e a exibi√ß√£o do m√≥dulo (travado, com progresso, sem progresso)
    if (module.locked) {
        moduleElement.classList.add('locked'); // Adiciona classe para estiliza√ß√£o de m√≥dulo travado
        progressHTML = `
            <div class="progress-indicator">
                <span class="lock-icon">üîí</span>
                <span>Em Breve</span>
            </div>`; // HTML para m√≥dulo travado
    } else { // Se o m√≥dulo N√ÉO est√° travado
        if (moduleProgress) { // Se h√° progresso salvo para este m√≥dulo
            const bestScore = moduleProgress.bestScore; // Obt√©m a melhor pontua√ß√£o salva para o m√≥dulo
            // CORRE√á√ÉO: Usa 'totalQuestions' (n√∫mero atual de perguntas do m√≥dulo) para calcular a porcentagem
            // Isso evita problemas se o n√∫mero de perguntas do m√≥dulo mudou desde a √∫ltima vez que o progresso foi salvo.
            const totalForPercentage = totalQuestions; 
            const percentage = Math.round((bestScore / totalForPercentage) * 100); // Calcula a porcentagem de acertos

            // --- IN√çCIO DA L√ìGICA DAS ESTRELAS E TROF√âU ---
            let starsHTML = ''; // String para o HTML das estrelas/trof√©u

            // Mantenha os console.logs para depura√ß√£o! Eles s√£o muito √∫teis para ver os valores.
            console.log(`--- DEBUG ESTRELAS para m√≥dulo: ${module.title} ---`);
            console.log(`bestScore: ${bestScore}, totalForPercentage: ${totalForPercentage}`);
            console.log(`Porcentagem Calculada: ${percentage}%`);
            console.log(`Is percentage >= 100? ${percentage >= 100}`);

            // L√≥gica para determinar se exibe trof√©u (100% de acerto) ou estrelas (de 0 a 4)
            // Se o n√∫mero de acertos for igual ao total de perguntas do m√≥dulo (100% de acerto)
            if (bestScore === totalForPercentage && totalForPercentage > 0) { 
                starsHTML = '<span class="trophy-icon">üèÜ</span>'; // Exibe o trof√©u
                console.log("Resultado: TROF√âU (Acertou todas!)");
            } else if (percentage >= 80) { // Se a porcentagem de acerto √© 80% ou mais (mas n√£o 100%)
                starsHTML = '<span class="stars-filled">‚≠ê‚≠ê‚≠ê‚≠ê</span>' + // 4 estrelas preenchidas
                            '<span class="stars-empty">‚≠ê</span>';       // 1 estrela vazia
                console.log("Resultado: 4 estrela(s) (>= 80% de acerto)");
            } else if (percentage >= 60) { // Se a porcentagem de acerto √© 60% ou mais (mas menos de 80%)
                starsHTML = '<span class="stars-filled">‚≠ê‚≠ê‚≠ê</span>' + // 3 estrelas preenchidas
                            '<span class="stars-empty">‚≠ê‚≠ê</span>';    // 2 estrelas vazias
                console.log("Resultado: 3 estrela(s) (>= 60% de acerto)");
            } else if (percentage >= 40) { // Se a porcentagem de acerto √© 40% ou mais (mas menos de 60%)
                starsHTML = '<span class="stars-filled">‚≠ê‚≠ê</span>' + // 2 estrelas preenchidas
                            '<span class="stars-empty">‚≠ê‚≠ê‚≠ê</span>'; // 3 estrelas vazias
                console.log("Resultado: 2 estrela(s) (>= 40% de acerto)");
            } else if (percentage >= 20) { // Se a porcentagem de acerto √© 20% ou mais (mas menos de 40%)
                starsHTML = '<span class="stars-filled">‚≠ê</span>' +    // 1 estrela preenchida
                            '<span class="stars-empty">‚≠ê‚≠ê‚≠ê‚≠ê</span>'; // 4 estrelas vazias
                console.log("Resultado: 1 estrela(s) (>= 20% de acerto)");
            } 
            // --- FIM DA L√ìGICA DAS ESTRELAS E TROF√âU ---
            
            // Constr√≥i o HTML do indicador de progresso final no card
            progressHTML = `
                <div class="progress-indicator">
                    <span class="stars">${starsHTML}</span>
                    <span class="percentage">Acerto: ${percentage}%</span>
                </div>
            `;
        } else { // Se N√ÉO h√° progresso salvo para este m√≥dulo (m√≥dulo n√£o iniciado)
            progressHTML = `
                <div class="progress-indicator">
                    <span class="percentage">${totalQuestions > 0 ? 'N√£o iniciado' : 'Em breve'}</span>
                </div>
            `;
        }
        
        // Adiciona um 'event listener' para iniciar o quiz quando o card do m√≥dulo √© clicado,
        // mas somente se o m√≥dulo tiver perguntas (ou seja, n√£o for 'Em breve')
        if (totalQuestions > 0) {
            moduleElement.addEventListener('click', () => onStartQuiz(module.id));
        } else {
            // Se o m√≥dulo n√£o tem perguntas, ele √© tratado como travado para fins de clique
            moduleElement.classList.add('locked'); 
        }
    }

    // Define o conte√∫do HTML interno do card do m√≥dulo
    moduleElement.innerHTML = `
        <img src="${module.image}" alt="${module.title}" class="module-card-image">
        <div class="module-content">
            <h3>${module.title}</h3>
            <p>${module.description}</p>
        </div>
        <div class="module-footer">
            ${progressHTML}
        </div>
    `;
    return moduleElement; // Retorna o elemento HTML do card do m√≥dulo
}

/**
 * Exibe a tela de listagem de m√≥dulos e esconde a tela do quiz.
 * @param {Function} onStartQuiz - Fun√ß√£o de callback para iniciar um quiz quando um m√≥dulo √© clicado.
 */
export function showModulesView(onStartQuiz) {
    // Atualiza o cabe√ßalho da p√°gina para a vis√£o de m√≥dulos
    updateHeader("Plataforma de Aprendizado ADS", "Escolha um m√≥dulo abaixo para come√ßar seus estudos.");
    
    DOMElements.modulesContainer.innerHTML = ''; // Limpa qualquer conte√∫do anterior do container de m√≥dulos
    // Para cada m√≥dulo na lista 'modules', cria seu card HTML e o adiciona ao container
    modules.forEach(module => {
        const moduleElement = createModuleHTML(module, onStartQuiz);
        DOMElements.modulesContainer.appendChild(moduleElement);
    });

    DOMElements.modulesContainer.style.display = 'grid'; // Mostra o container de m√≥dulos (usando grid para layout)
    DOMElements.quizContainer.classList.add('hidden');
    DOMElements.modulesContainer.classList.remove('hidden');
    DOMElements.outDoor.classList.remove('hidden');
    DOMElements.rodape.classList.remove('hidden');
    DOMElements.scoreArea.classList.remove('hidden');
}

/**
 * Exibe a tela do quiz para um m√≥dulo espec√≠fico e esconde a tela de m√≥dulos.
 * @param {Object} module - O objeto do m√≥dulo para o qual o quiz ser√° exibido.
 */
export function showQuizView(module) {
    // Atualiza o cabe√ßalho da p√°gina com informa√ß√µes do quiz atual
    updateHeader(module.title, `Teste seus conhecimentos sobre ${module.title}!`, module.image);
    DOMElements.modulesContainer.classList.add('hidden'); // Esconde o container de m√≥dulos
    DOMElements.outDoor.classList.add('hidden');
    DOMElements.rodape.classList.add('hidden');
    DOMElements.scoreArea.classList.add('hidden');
    DOMElements.quizContainer.classList.remove('hidden'); // Mostra o container do quiz
    DOMElements.backToModulesButton.style.display = 'inline-block'; // Mostra o bot√£o de voltar
    resetQuizState();
}

/**
 * Exibe uma tela de m√≥dulo vazio/em desenvolvimento.
 * @param {Object} module - O objeto do m√≥dulo que est√° vazio.
 */
export function showEmptyModuleView(module) {
    updateHeader(module.title, "Conte√∫do em desenvolvimento.", module.image); // Atualiza o cabe√ßalho
    DOMElements.modulesContainer.classList.add('hidden'); // Esconde m√≥dulos
    DOMElements.quizContainer.classList.add('hidden'); // Mostra √°rea do quiz
    DOMElements.backToModulesButton.style.display = 'inline-block'; // Mostra bot√£o de voltar
    DOMElements.progressContainer.classList.add('hidden'); // Esconde barra de progresso (n√£o relevante para m√≥dulo vazio)
    
    // Configura a √°rea da pergunta para exibir a mensagem de "conte√∫do em breve"
    DOMElements.questionArea.style.opacity = '1'; 
    DOMElements.questionArea.style.transform = 'translateY(0)';
    DOMElements.questionText.innerHTML = `Conte√∫do para "<strong>${module.title}</strong>" estar√° dispon√≠vel em breve!`;
    DOMElements.optionsContainer.innerHTML = ''; // Limpa op√ß√µes de resposta
    DOMElements.feedbackArea.classList.add('hidden'); // Esconde √°rea de feedback
    DOMElements.feedbackText.innerHTML = ''; // Limpa texto de feedback
    DOMElements.nextButton.classList.add('hidden'); // Esconde bot√£o de pr√≥xima pergunta
    DOMElements.score.parentElement.classList.add('hidden'); // Esconde √°rea de pontua√ß√£o
}

/**
 * Atualiza a barra de progresso do quiz.
 * @param {number} completedCount - N√∫mero de perguntas completadas.
 * @param {number} totalCount - N√∫mero total de perguntas no quiz.
 */
export function updateProgressBar(completedCount, totalCount) {
    if (totalCount > 0) { // Garante que n√£o haja divis√£o por zero
        const percentage = (completedCount / totalCount) * 100; // Calcula a porcentagem de progresso
        DOMElements.progressBar.style.width = percentage + '%'; // Atualiza a largura visual da barra
        DOMElements.progressContainer.style.display = 'flex'; // Mostra o container da barra de progresso
    } else {
        DOMElements.progressContainer.classList.add('hidden'); // Esconde a barra se n√£o houver perguntas
    }
}

/**
 * Atualiza a pontua√ß√£o exibida na interface do usu√°rio.
 * @param {number} score - A pontua√ß√£o atual a ser exibida.
 */
export function updateScore(score) {
    DOMElements.score.textContent = score; // Define o texto do elemento da pontua√ß√£o
}

/**
 * Aplica um efeito de fade-in (aparecer gradualmente) e slide-up a um elemento.
 * @param {HTMLElement} element - O elemento HTML ao qual aplicar o efeito.
 */
function fadeIn(element) {
    element.style.opacity = '0'; // Define opacidade inicial como 0 (invis√≠vel)
    element.style.transform = 'translateY(20px)'; // Move o elemento 20px para baixo
    void element.offsetWidth; // For√ßa um "reflow" do navegador para garantir que as propriedades iniciais sejam aplicadas antes da transi√ß√£o
    element.style.opacity = '1'; // Define opacidade para 1 (vis√≠vel), iniciando a transi√ß√£o
    element.style.transform = 'translateY(0)'; // Move o elemento de volta para a posi√ß√£o original
}

/**
 * Renderiza uma pergunta na interface do usu√°rio e configura os bot√µes de op√ß√£o.
 * @param {Object} question - O objeto da pergunta a ser renderizada.
 * @param {Function} onAnswer - Fun√ß√£o de callback a ser executada quando uma op√ß√£o de resposta √© selecionada.
 */
export function renderQuestion(question, onAnswer) {
    // Esconde/limpa elementos de feedback de uma pergunta anterior
    DOMElements.feedbackArea.classList.add('hidden');
    DOMElements.feedbackText.innerHTML = '';
    DOMElements.feedbackText.className = ''; // Remove classes de feedback anteriores
    
    // NOVIDADE: Oculta o bot√£o de pr√≥xima pergunta ao carregar uma nova pergunta
    DOMElements.nextButton.classList.remove('hidden');
    DOMElements.nextButton.disabled = true;
    
    DOMElements.optionsContainer.innerHTML = ''; // Limpa op√ß√µes de resposta anteriores
    DOMElements.score.parentElement.classList.remove('hidden'); // Garante que a √°rea de pontua√ß√£o esteja vis√≠vel

    // =============================================================
    // ---------- VERIFICA SE O JOGO ACABOU (VIDAS = 0) ----------
    // =============================================================
    if (lives <= 0) {
        showMessageBox("Game Over!");
        // N√£o renderiza a pergunta se o jogo acabou
        return;
    }

    DOMElements.questionText.textContent = question.question; // Define o texto da pergunta

    // Embaralha as op√ß√µes de resposta para que apare√ßam em ordem diferente a cada vez
    const shuffledOptions = [...question.options].sort(() => Math.random() - 0.5);

    // Cria e adiciona um bot√£o para cada op√ß√£o de resposta
    shuffledOptions.forEach(option => {
        const button = document.createElement('button'); // Cria um novo bot√£o
        button.textContent = option; // Define o texto do bot√£o como a op√ß√£o de resposta
        button.classList.add('option-button'); // Adiciona classe para estiliza√ß√£o
        // Adiciona um 'event listener' para quando o bot√£o for clicado
        button.addEventListener('click', () => {
            const isCorrect = option === question.correctAnswer; // Verifica se a op√ß√£o selecionada √© a correta
            onAnswer(isCorrect, option, button); // Chama a fun√ß√£o de callback com o resultado
            
            // NOVIDADE: Mostra o bot√£o de pr√≥xima pergunta ap√≥s o usu√°rio clicar em uma op√ß√£o
            DOMElements.feedbackArea.classList.remove('hidden')
            DOMElements.nextButton.disabled = false;
        });
        DOMElements.optionsContainer.appendChild(button); // Adiciona o bot√£o ao container de op√ß√µes
    });

    fadeIn(DOMElements.questionArea); // Aplica o efeito de fade-in na √°rea da pergunta
}

/**
 * Mostra o feedback visual ap√≥s o usu√°rio responder a uma pergunta.
 * @param {boolean} isCorrect - Verdadeiro se a resposta estiver correta, falso caso contr√°rio.
 * @param {string} selectedOption - O texto da op√ß√£o selecionada pelo usu√°rio.
 * @param {HTMLElement} button - O bot√£o HTML da op√ß√£o selecionada.
 * @param {string} correctAnswer - O texto da resposta correta da pergunta.
 * @param {string} explanation - A explica√ß√£o da resposta.
 * @param {Function} onStartQuiz
 */
export function showAnswerFeedback(isCorrect, selectedOption, button, correctAnswer, explanation, onStartQuiz) {
    // Desabilita todos os bot√µes de op√ß√£o para evitar m√∫ltiplas respostas
    const optionButtons = DOMElements.optionsContainer.querySelectorAll('.option-button');
    optionButtons.forEach(btn => {
        btn.disabled = true;
        // Adiciona classes para destacar a resposta correta e a incorreta (se houver)
        if (btn.textContent === correctAnswer) {
            btn.classList.add('correct'); // Destaca a resposta correta
        } else if (btn === button && !isCorrect) {
            btn.classList.add('incorrect'); // Destaca a resposta incorreta que foi clicada
        }
    });

    DOMElements.feedbackArea.classList.remove('hidden'); // Mostra a √°rea de feedback
    let feedbackPrefix = ""; // Prefixo para a mensagem de feedback

    // Define a mensagem de feedback e a classe CSS com base na corre√ß√£o da resposta
    if (isCorrect) {
        feedbackPrefix = "<strong>Correto!</strong> ";
        DOMElements.feedbackText.classList.add('correct'); // Adiciona classe para feedback correto
    } else {
        // =============================================================
        // ---------- L√ìGICA DE VIDAS PARA RESPOSTAS INCORRETAS ----------
        // =============================================================
        lives--; // Decrementa a contagem de vidas
        updateLivesDisplay(); // Atualiza a exibi√ß√£o de vidas
        
        // Verifica se o jogo acabou
        if (lives <= 0) {
            // Se as vidas acabarem, exibe a mensagem de "Game Over"
            showMessageBox("Game Over!");
            // Esconde a √°rea de pergunta e op√ß√µes
            DOMElements.questionArea.classList.add('hidden');
            DOMElements.progressContainer.classList.add('hidden');
            DOMElements.topBar.classList.remove('hidden');
        } else {
             // Se ainda h√° vidas, mostra o feedback normal de resposta incorreta
             feedbackPrefix = `<strong>Incorreto.</strong> A resposta correta √©: <em>"${correctAnswer}"</em>. `;
             DOMElements.feedbackText.classList.add('incorrect'); // Adiciona classe para feedback incorreto
             DOMElements.feedbackText.innerHTML = feedbackPrefix + explanation; // Define o texto e a explica√ß√£o do feedback
        }
    }
    DOMElements.feedbackText.innerHTML = feedbackPrefix + explanation; // Define o texto e a explica√ß√£o do feedback
    DOMElements.nextButton.style.display = 'inline-block'; // Mostra o bot√£o "Pr√≥xima Pergunta"

    // Se o jogo n√£o acabou, mostra o bot√£o de pr√≥xima pergunta
    if (lives > 0) {
        DOMElements.nextButton.style.display = 'inline-block'; // Mostra o bot√£o "Pr√≥xima Pergunta"
    } else {
        // Se o jogo acabou, esconde o bot√£o "Pr√≥xima Pergunta"
        //DOMElements.nextButton.style.display = 'none';
        
        // NOVIDADE: Adiciona um bot√£o para "Tentar Novamente" ou "Voltar aos M√≥dulos"
        const backButton = document.createElement('button');
        backButton.textContent = 'Voltar aos M√≥dulos';
        backButton.classList.add('next-button');
        backButton.addEventListener('click', () => {
            // Recarrega a p√°gina ou chama a fun√ß√£o para voltar aos m√≥dulos
            // window.location.reload(); // Op√ß√£o 1: Recarregar a p√°gina
            showModulesView(); // Op√ß√£o 2: Voltar aos m√≥dulos sem recarregar a p√°gina
            hideMessageBox(); // Garante que a mensagem de Game Over seja removida
            DOMElements.questionArea.classList.remove('hidden');
            DOMElements.progressContainer.classList.remove('hidden');
        });

        
        //DOMElements.nextButton.parentNode.replaceChild(newNextButton, DOMElements.nextButton);
        DOMElements.nextButton.classList.add('next-button')
        DOMElements.nextButton.textContent = 'Retornar aos M√≥dulos';
        DOMElements.nextButton.addEventListener('click', () => {
            showModulesView()
            hideMessageBox(); // Garante que a mensagem de Game Over seja removida
            DOMElements.questionArea.classList.remove('hidden');
            DOMElements.progressContainer.classList.remove('hidden');
        });
        //DOMElements.quizContainer.appendChild(backButton);
    }

}

/**
 * Renderiza a tela de resultados finais do quiz e configura o bot√£o para voltar ao menu.
 * @param {number} score - A pontua√ß√£o final do usu√°rio.
 * @param {number} totalQuestions - O n√∫mero total de perguntas no quiz.
 * @param {Function} onRestart - Fun√ß√£o de callback que precisa ser passada para a `showModulesView`.
* @param {Function} onStartQuiz
*/
export function renderFinalResults(score, totalQuestions, onStartQuiz) {
    fadeIn(DOMElements.questionArea);
    updateProgressBar(totalQuestions, totalQuestions);

    DOMElements.questionText.innerHTML = `Quiz Conclu√≠do! <br>Sua pontua√ß√£o final √©: <strong>${score} de ${totalQuestions}</strong>.`;
    DOMElements.optionsContainer.innerHTML = '';
    DOMElements.feedbackArea.classList.remove('hidden');
    DOMElements.nextButton.classList.remove('hidden'); // Garante que o bot√£o esteja vis√≠vel

    let finalMessage = "";
    if (score === totalQuestions) {
        finalMessage = "Excelente! Voc√™ dominou todos os conceitos b√°sicos. Parab√©ns!";
        DOMElements.feedbackText.classList.add('correct');
    } else if (score >= totalQuestions * 0.7) {
        finalMessage = "Muito bom! Voc√™ tem um bom entendimento dos fundamentos.";
        DOMElements.feedbackText.classList.add('correct');
    } else if (score >= totalQuestions * 0.4) {
        finalMessage = "Nada mal! Continue estudando para aprimorar seus conhecimentos.";
        DOMElements.feedbackText.className = '';
    } else {
        finalMessage = "Parece que voc√™ est√° come√ßando. Continue aprendendo e refa√ßa o quiz para fixar os conceitos!";
        DOMElements.feedbackText.classList.add('incorrect');
    }
    DOMElements.feedbackText.innerHTML = finalMessage;
    
    // Clona o bot√£o para remover event listeners antigos e adiciona um novo para retornar
    const newNextButton = DOMElements.nextButton.cloneNode(true);
    DOMElements.nextButton.parentNode.replaceChild(newNextButton, DOMElements.nextButton);
    DOMElements.nextButton = newNextButton; 
    DOMElements.nextButton.textContent = 'Retornar aos M√≥dulos';
    DOMElements.nextButton.addEventListener('click', () => {
        showModulesView(onStartQuiz);
    });
    // =============================================================
    // ---------- ESCONDE O CONTAINER DE VIDAS AO FINALIZAR O QUIZ ----------
    // =============================================================
    DOMElements.livesContainer.classList.add('hidden');

}

export function resetQuizState() {
    DOMElements.nextButton.textContent = 'Pr√≥xima Pergunta';
    DOMElements.nextButton.disabled = true;
    DOMElements.nextButton.classList.add('hidden');
}


document.addEventListener('DOMContentLoaded', () => {
    DOMElements.backToModulesButton.addEventListener('click', () => {
        showModulesView();
    });
});